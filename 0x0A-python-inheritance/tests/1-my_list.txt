#1-my_list.txt

==================
Using 1-my_list.py
==================

The module defines a parent class ``MyList`` that inherits from ``list``.

Initialization
==============

``MyList`` can be initialized with no arguments,
or a single iterable object.

Tests
-----

First import the module:


    >>> MyList = __import__('1-my_list').MyList

Then use it:

Create an instance of ``MyList``

    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>

    >>> print(my_list)
    []

    >>> my_list = MyList([1, 2, 3])
    >>> print(my_list)
    [1, 2, 3]

    >>> my_list = MyList(None)
    Traceback (most recent call last):
        ...
    TypeError: 'NoneType' object is not iterable


    >>> my_list = MyList([1, 2, 3], [4, 5, 6], [7, 8])
    Traceback (most recent call last):
        ...
    TypeError: list expected at most 1 argument, got 3

Usage
-----

``MyList`` inherits the ``list`` built-in class, hence, it as the same methods.


    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> print(my_list)
    [1, 2, 3]

and other methods like remove, ecetera.


=======================
``print_sorted`` Method
=======================

A public instance method in the ``MyList`` class that prints the elements
of a list in a sorted ascending order.


Some info with the print method:


    >>> my_list = MyList()
    >>> print(my_list.print_sorted)
    <bound method MyList.print_sorted of []>


Calling the method with arguments raises an error:


    >>> my_list.print_sorted(0)
    Traceback (most recent call last):
        ...
    TypeError: print_sorted() takes 1 positional argument but 2 were given

Proper Usage:


    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]

    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

NB: The original order of the list is not affected after calling the method:

    >>> print(my_list)
    [1, 4, 2, 3, 5]

Testing on empty list:

    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []

Works on strings also (Sorts lexographically):

    >>> my_list = MyList(["Aishah", "Cane", "Betty"])
    >>> my_list.print_sorted()
    ['Aishah', 'Betty', 'Cane']

List must contain elements of the same type, else a TypeError is raised:


    >>> my_list = MyList(["Aishah", 2, 3, "Testing"])
    >>> my_list.print_sorted()
    Traceback (most recent call last):
        ...
    TypeError: '<' not supported between instances of 'int' and 'str'
